#!/bin/bash

# Remove comments to shrink the size of a Tandy Model 100 BASIC program.

# Lines which start with a comment remain (with an empty comment) if
# they are used as jump destinations by GOTO, GOSUB, or THEN. (See
# jumpdestinations program).

# Any line which includes two singles quotes in a row will be kept verbatim.


# For MacOS, we need gsed to work properly.
if type gsed >/dev/null 2>&1; then
    shopt -s expand_aliases
    alias sed=gsed
fi

input=${1:-M100LE+comments.DO} # Default file to check if not specified
output=${2:-/dev/stdout} # Write to stdout if not second file.

echo "Reading from $input, writing to $output" >&2


# An array of line numbers to keep
declare -a jumps=($(`dirname $0`/jumpdestinations -l "$input"))
declare -i i=0

# Do not remove single ticks that appear after an odd-number of double-quotes.
# XXX this is broken. Should just use a proper lexer.
dq='"'				# A single double-quote 
notdq="[^${dq}]"		# Not a double-quote
sq="'"				# A single single-quote 
neither="[^${sq}${dq}]"		# Neither ' nor "
# Regex for pairs of doubles quotes: .*".*".*
dbldq="(${neither}*(${dq}${notdq}*${dq})*[^${dq}:[:space:]\']*)"

# Remove all comments and lines with no content
cat "$input" | sort -n |
    while read line; do
	# Extract line number, discarding leading whitespace and zeroes.
	lineno=$(echo "$line" | sed -rn 's/^\s*0*([0-9]+).*$/\1/p')

	# Progress meter for long files
	echo -n $lineno$'\r' >&2

	# Make sure we have the next jump destination queued up.
	while [[  ${jumps[i]}  &&  $lineno -gt ${jumps[i]}  ]]; do
	    i=i+1
	done

	# If the line contains '' (two single quotes), do NOT remove anything.
	if [[ "$line" == *\'\'* ]]; then echo "$line"; continue; fi

	# If the line contains a double quote, do NOT remove anything. (KLUDGE)
	if [[ "$line" == *\"* ]]; then echo "$line"; continue; fi

	# Is the line number equal (numerically) to the current jump point?
	if [[ $lineno -eq ${jumps[i]} ]]; then
	    # Keep this line as it is a jump destination, remove comment.
	    keep="'"
	else
	    keep=""
	fi
	# Trim this line of comments. (Potentially removing it later).
	echo "$line" |
	    sed -r "s/(${neither}*)\s*(REM|${sq})[^\r]*/\1${keep}/i;
	            s/[ :	]*(\r?)$/\1/" 
    done |

    # Remove ^Z, blank lines, and line numbers with no content
    tr -d $'\cZ' | grep -v '^\s*[0-9]*\s*$' |

    sort -n > "$output"
